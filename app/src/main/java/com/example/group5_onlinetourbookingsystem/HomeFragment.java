package com.example.group5_onlinetourbookingsystem;

import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.TextView;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.fragment.app.Fragment;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;

import com.example.group5_onlinetourbookingsystem.Database.MyDatabaseHelper;
import com.example.group5_onlinetourbookingsystem.activities.TourDetailActivity;
import com.example.group5_onlinetourbookingsystem.adapters.CategoryAdapter;
import com.example.group5_onlinetourbookingsystem.adapters.TourAdapter;
import com.example.group5_onlinetourbookingsystem.models.CategoryModel;
import com.example.group5_onlinetourbookingsystem.models.TourModel;
import com.example.group5_onlinetourbookingsystem.utils.SessionManager;

import java.util.ArrayList;

public class HomeFragment extends Fragment {
    private RecyclerView recyclerViewCategories, recyclerViewTours;
    private CategoryAdapter categoryAdapter;
    private TourAdapter tourAdapter;
    private ArrayList<CategoryModel> categoryList;
    private ArrayList<TourModel> tourList;
    private MyDatabaseHelper databaseHelper;
    private SessionManager sessionManager;
    private TextView textViewUserName;
    private ProgressBar progressBar; // ProgressBar hi·ªÉn th·ªã khi t·∫£i d·ªØ li·ªáu
    private int currentPage = 0;
    private final int PAGE_SIZE = 5; // S·ªë tour t·∫£i m·ªói l·∫ßn
    private boolean isLoading = false; // Ki·ªÉm so√°t tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu

    public HomeFragment() {
        // Required empty public constructor
    }

    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_home, container, false);
        if (getContext() == null) return view;

        sessionManager = new SessionManager(requireContext());
        databaseHelper = new MyDatabaseHelper(requireContext());

        // Ki·ªÉm tra v√† th√™m d·ªØ li·ªáu m·∫´u n·∫øu c·∫ßn
        addSampleRoles();
        addSampleCategories();
        addSampleTours();
        addSampleCities(); // üîπ G·ªçi ƒë·ªÉ th√™m d·ªØ li·ªáu m·∫´u khi kh·ªüi ch·∫°y
        // G√°n UI components
        EditText editTextSearch = view.findViewById(R.id.editTextSearch);
        recyclerViewCategories = view.findViewById(R.id.recyclerViewCategories);
        recyclerViewTours = view.findViewById(R.id.recycler_view);
        progressBar = view.findViewById(R.id.progressBar); // G√°n ID ProgressBar

        // C·∫•u h√¨nh t√¨m ki·∫øm tour
        editTextSearch.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {}

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
                searchTours(s.toString().trim());
            }

            @Override
            public void afterTextChanged(Editable s) {}
        });

        // C·∫•u h√¨nh RecyclerView danh m·ª•c
        recyclerViewCategories.setLayoutManager(new LinearLayoutManager(getContext(), LinearLayoutManager.HORIZONTAL, false));
        categoryList = databaseHelper.getAllCategories();
        categoryAdapter = new CategoryAdapter(getContext(), categoryList, category -> {
            Log.d("HomeFragment", "Clicked category: " + category.getName());
            filterToursByCategory(category.getId());
        });
        recyclerViewCategories.setAdapter(categoryAdapter);

        // C·∫•u h√¨nh RecyclerView danh s√°ch tour
        recyclerViewTours.setLayoutManager(new LinearLayoutManager(getContext()));
        tourList = new ArrayList<>();
        tourAdapter = new TourAdapter(getContext(), tourList, tour -> {
            Intent intent = new Intent(getContext(), TourDetailActivity.class);
            intent.putExtra("tour_id", tour.getId());
            startActivity(intent);
        });
        recyclerViewTours.setAdapter(tourAdapter);

        // T·∫£i d·ªØ li·ªáu ban ƒë·∫ßu
        loadMoreTours();

        // X·ª≠ l√Ω s·ª± ki·ªán cu·ªôn ƒë·ªÉ t·∫£i th√™m d·ªØ li·ªáu
        recyclerViewTours.addOnScrollListener(new RecyclerView.OnScrollListener() {
            @Override
            public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {
                super.onScrolled(recyclerView, dx, dy);
                LinearLayoutManager layoutManager = (LinearLayoutManager) recyclerView.getLayoutManager();
                if (!isLoading && layoutManager != null && layoutManager.findLastVisibleItemPosition() >= tourList.size() - 1) {
                    loadMoreTours();
                }
            }
        });

        return view;
    }

    private void loadMoreTours() {
        if (isLoading) return; // Tr√°nh g·ªçi nhi·ªÅu l·∫ßn

        isLoading = true;
        progressBar.setVisibility(View.VISIBLE);

        new Handler().postDelayed(() -> {
            ArrayList<TourModel> newTours = databaseHelper.getToursByPage(currentPage * PAGE_SIZE, PAGE_SIZE);
            if (!newTours.isEmpty()) {
                tourList.addAll(newTours);
                tourAdapter.notifyDataSetChanged();
                currentPage++;
            }
            isLoading = false;
            progressBar.setVisibility(View.GONE);
        }, 1000); // Gi·∫£ l·∫≠p delay t·∫£i d·ªØ li·ªáu
    }

    private void searchTours(String query) {
        tourList.clear();
        if (query.isEmpty()) {
            tourList.addAll(databaseHelper.getAllTours());
        } else {
            tourList.addAll(databaseHelper.searchTours(query));
        }
        tourAdapter.notifyDataSetChanged();
    }

    private void filterToursByCategory(int categoryId) {
        tourList.clear();
        if (categoryId == -1) { // N·∫øu ch·ªçn "T·∫•t c·∫£ danh m·ª•c"
            tourList.addAll(databaseHelper.getAllTours());
        } else {
            tourList.addAll(databaseHelper.getToursByCategory(categoryId));
        }
        tourAdapter.notifyDataSetChanged();
    }

    private void addSampleRoles() {
        if (databaseHelper.getAllRoles().isEmpty()) {
            databaseHelper.addRole("Customer");
            databaseHelper.addRole("Admin");
            databaseHelper.addRole("Tour Guide");
        }
    }
    private void addSampleCities() {
        if (databaseHelper.getAllCities().isEmpty()) { // Ki·ªÉm tra n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu
            databaseHelper.addCity("H√† N·ªôi");
            databaseHelper.addCity("ƒê√† N·∫µng");
            databaseHelper.addCity("H·ªì Ch√≠ Minh");
            databaseHelper.addCity("ƒê√† L·∫°t");
            databaseHelper.addCity("Nha Trang");
        }
    }

    private void addSampleCategories() {
        if (databaseHelper.getAllCategories().isEmpty()) {
            databaseHelper.addCategory("Du l·ªãch n√∫i", "mountain");
            databaseHelper.addCategory("Du l·ªãch bi·ªÉn", "sea");
            databaseHelper.addCategory("Du l·ªãch th√†nh ph·ªë", "city");
            databaseHelper.addCategory("Du l·ªãch sinh th√°i", "eco");
            databaseHelper.addCategory("Du l·ªãch vƒÉn h√≥a", "cultural");
            databaseHelper.addCategory("Du l·ªãch phi√™u l∆∞u", "adventure");
        }
    }

    private void addSampleTours() {
        if (databaseHelper.getAllTours().isEmpty()) {
            databaseHelper.addTour("Tour ƒê√† L·∫°t", "ƒê√† L·∫°t", 1, 150.0, 3, "dalat_tour", 1, "2025-03-10 08:00:00", "Th∆∞·ªüng th·ª©c kh√≠ h·∫≠u m√°t m·∫ª v√† c·∫£nh ƒë·∫πp th∆° m·ªông c·ªßa ƒê√† L·∫°t.");
            databaseHelper.addTour("Tour Ph√∫ Qu·ªëc", "Ph√∫ Qu·ªëc", 2, 200.0, 4, "phuquoc_tour", 2, "2025-03-12 09:30:00", "Kh√°m ph√° h√≤n ƒë·∫£o ng·ªçc v·ªõi b√£i bi·ªÉn tuy·ªát ƒë·∫πp v√† h·∫£i s·∫£n t∆∞∆°i ngon.");
            databaseHelper.addTour("Tour H√† N·ªôi", "H√† N·ªôi", 3, 180.0, 3, "hanoi_tour", 3, "2025-03-15 07:45:00", "Tr·∫£i nghi·ªám vƒÉn h√≥a, l·ªãch s·ª≠ th·ªß ƒë√¥ v·ªõi 36 ph·ªë ph∆∞·ªùng v√† H·ªì G∆∞∆°m.");
        }
    }
}
